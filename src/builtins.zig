pub const Builtin = enum {
    __builtin_bswap16,
    __builtin_bswap32,
    __builtin_bswap64,
    __builtin_signbit,
    __builtin_signbitf,
    __builtin_popcount,
    __builtin_ctz,
    __builtin_clz,
    __builtin_sqrt,
    __builtin_sqrtf,
    __builtin_sin,
    __builtin_sinf,
    __builtin_cos,
    __builtin_cosf,
    __builtin_exp,
    __builtin_expf,
    __builtin_exp2,
    __builtin_exp2f,
    __builtin_log,
    __builtin_logf,
    __builtin_log2,
    __builtin_log2f,
    __builtin_log10,
    __builtin_log10f,
    __builtin_abs,
    __builtin_labs,
    __builtin_llabs,
    __builtin_fabs,
    __builtin_fabsf,
    __builtin_floor,
    __builtin_floorf,
    __builtin_ceil,
    __builtin_ceilf,
    __builtin_trunc,
    __builtin_truncf,
    __builtin_round,
    __builtin_roundf,
    __builtin_strlen,
    __builtin_strcmp,
    __builtin_object_size,
    __builtin___memset_chk,
    __builtin_memset,
    __builtin___memcpy_chk,
    __builtin_memcpy,
    __builtin_nanf,
    __builtin_huge_valf,
    __builtin_inff,
    __builtin_isnan,
    __builtin_isinf,
    __builtin_isinf_sign,
    __has_builtin,
    __builtin_assume,
    __builtin_unreachable,
    __builtin_constant_p,
    __builtin_mul_overflow,

    // __builtin_alloca_with_align is not currently implemented.
    // It is used in a run and a translate test to ensure that non-implemented
    // builtins are correctly demoted. If you implement __builtin_alloca_with_align,
    // please update the tests to use a different non-implemented builtin.

    pub fn source(b: Builtin) ?[]const u8 {
        return switch (b) {
            .__builtin_signbit => @embedFile("builtins/signbit.zig"),
            .__builtin_signbitf => @embedFile("builtins/signbitf.zig"),
            .__builtin_popcount => @embedFile("builtins/popcount.zig"),
            .__builtin_ctz => @embedFile("builtins/ctz.zig"),
            .__builtin_clz => @embedFile("builtins/clz.zig"),
            .__builtin_abs => @embedFile("builtins/abs.zig"),
            .__builtin_labs => @embedFile("builtins/labs.zig"),
            .__builtin_llabs => @embedFile("builtins/llabs.zig"),
            .__builtin_strlen => @embedFile("builtins/strlen.zig"),
            .__builtin_strcmp => @embedFile("builtins/strcmp.zig"),
            .__builtin_object_size => @embedFile("builtins/object_size.zig"),
            .__builtin___memset_chk => @embedFile("builtins/memset_chk.zig"),
            .__builtin_memset => @embedFile("builtins/memset.zig"),
            .__builtin___memcpy_chk => @embedFile("builtins/memcpy_chk.zig"),
            .__builtin_memcpy => @embedFile("builtins/memcpy.zig"),
            .__builtin_nanf => @embedFile("builtins/nanf.zig"),
            .__builtin_huge_valf => @embedFile("builtins/huge_valf.zig"),
            .__builtin_inff => @embedFile("builtins/inff.zig"),
            .__builtin_isnan => @embedFile("builtins/isnan.zig"),
            .__builtin_isinf => @embedFile("builtins/isinf.zig"),
            .__builtin_isinf_sign => @embedFile("builtins/isinf_sign.zig"),
            .__has_builtin => @embedFile("builtins/has_builtin.zig"),
            .__builtin_assume => @embedFile("builtins/assume.zig"),
            .__builtin_constant_p => @embedFile("builtins/constant_p.zig"),
            .__builtin_mul_overflow => @embedFile("builtins/mul_overflow.zig"),
            else => return null,
        };
    }
};
